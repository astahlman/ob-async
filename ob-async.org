#+TITLE: org-babel-async
#+AUTHOR: Andrew Stahlman

* Wishlist
- [X] Add README
- [X] Add package metadata, e.g. author, version, installation
  instructions, etc.
- [ ] Add to MELPA
- [ ] Additional testing: named src blocks, concurrent execution,
  post-processing, etc.
- [ ] Separate make targets for environment setup and running unit
  tests, so that subsequent unit test runs don't require network
  access
- [ ] Proper make target to generate .el from .org source
- [ ] Support #+CALL blocks
- [ ] Write BDD style integration tests, like [[http://rejeep.github.io/emacs/testing/cask/ecukes/2013/10/20/integration-testing-in-emacs.html][this]]
* Proof of Concept

I love org-babel, but I hate that long-running functions (e.g.,
querying Redshift) block Emacs until completion.

I'd like to be able to start a function evaluating and then continue
editing in the same buffer while it executes.

** Phase 1: Async execution, no return

Here's a good start, proving that we can execute source blocks
asynchronously. I just took the existing =org-babel-execute-src-block=
definition and replaced the actual function call with an asynchronous
implementation. From here we just need to capture the results and
insert them into the buffer.

#+BEGIN_SRC emacs-lisp
    (defun org-babel-execute-src-block-mine (&optional arg info params)
      "Execute the current source code block.
    Insert the results of execution into the buffer.  Source code
    execution and the collection and formatting of results can be
    controlled through a variety of header arguments.

    With prefix argument ARG, force re-execution even if an existing
    result cached in the buffer would otherwise have been returned.

    Optionally supply a value for INFO in the form returned by
    `org-babel-get-src-block-info'.

    Optionally supply a value for PARAMS which will be merged with
    the header arguments specified at the front of the source code
    block."
      (interactive)
      (let* ((org-babel-current-src-block-location
	      (or org-babel-current-src-block-location
	          (nth 5 info)
	          (org-babel-where-is-src-block-head)))
	     (info (if info (copy-tree info) (org-babel-get-src-block-info))))
        ;; Merge PARAMS with INFO before considering source block
        ;; evaluation since both could disagree.
        (cl-callf org-babel-merge-params (nth 2 info) params)
        (when (org-babel-check-evaluate info)
          (cl-callf org-babel-process-params (nth 2 info))
          (let* ((params (nth 2 info))
	         (cache (let ((c (cdr (assq :cache params))))
		          (and (not arg) c (string= "yes" c))))
	         (new-hash (and cache (org-babel-sha1-hash info)))
	         (old-hash (and cache (org-babel-current-result-hash)))
	         (current-cache (and new-hash (equal new-hash old-hash))))
	    (cond
	     (current-cache
	      (save-excursion		;Return cached result.
	        (goto-char (org-babel-where-is-src-block-result nil info))
	        (forward-line)
	        (skip-chars-forward " \t")
	        (let ((result (org-babel-read-result)))
	          (message (replace-regexp-in-string "%" "%%" (format "%S" result)))
	          result)))
	     ((org-babel-confirm-evaluate info)
	      (let* ((lang (nth 0 info))
		     (result-params (cdr (assq :result-params params)))
		     ;; Expand noweb references in BODY and remove any
		     ;; coderef.
		     (body
		      (let ((coderef (nth 6 info))
			    (expand
			     (if (org-babel-noweb-p params :eval)
			         (org-babel-expand-noweb-references info)
			       (nth 1 info))))
		        (if (not coderef) expand
		          (replace-regexp-in-string
		           (org-src-coderef-regexp coderef) "" expand nil nil 1))))
		     (dir (cdr (assq :dir params)))
		     (default-directory
		       (or (and dir (file-name-as-directory (expand-file-name dir)))
		           default-directory))
		     (cmd (intern (concat "org-babel-execute:" lang)))
		     result)
	        (unless (fboundp cmd)
	          (error "No org-babel-execute function for %s!" lang))
	        (message "executing %s code block%s..."
		         (capitalize lang)
		         (let ((name (nth 4 info)))
		           (if name (format " (%s)" name) "")))
	        (if (member "none" result-params)
		    (progn (funcall cmd body params)
		           (message "result silenced"))
	          (progn
                    (async-start
                     `(lambda ()
                        (setq exec-path (append exec-path '("~/.emacs.d/elpa")))
                        (package-initialize)
                        (org-babel-do-load-languages
                         'org-babel-load-languages
                         '((emacs-lisp . t)
                           (shell . t)))
                        (,cmd ,body ',params))
                     (lambda (result)
                       (message "Async done: %s" result)))
                    (setq result
                          (let ((r (funcall cmd body params)))
                            (if (and (eq (cdr (assq :result-type params)) 'value)
                                     (or (member "vector" result-params)
                                         (member "table" result-params))
                                     (not (listp r)))
                                (list (list r))
                              r))))
	          (let ((file (cdr (assq :file params))))
		    ;; If non-empty result and :file then write to :file.
		    (when file
		      (when result
		        (with-temp-file file
		          (insert (org-babel-format-result
			           result (cdr (assq :sep params))))))
		      (setq result file))
		    ;; Possibly perform post process provided its
		    ;; appropriate.  Dynamically bind "*this*" to the
		    ;; actual results of the block.
		    (let ((post (cdr (assq :post params))))
		      (when post
		        (let ((*this* (if (not file) result
				        (org-babel-result-to-file
				         file
				         (let ((desc (assq :file-desc params)))
				           (and desc (or (cdr desc) result)))))))
		          (setq result (org-babel-ref-resolve post))
		          (when file
			    (setq result-params (remove "file" result-params))))))
		    (org-babel-insert-result-mine
		     result result-params info new-hash lang)))
	        (run-hooks 'org-babel-after-execute-hook)
	        result)))))))
#+END_SRC

#+RESULTS:
: org-babel-execute-src-block-mine

** Phase 2: Async execution, with return

Spent a while tracking down why org-babel-insert-result was throwing
this error:

#+BEGIN_EXAMPLE
if: Wrong type argument: integer-or-marker-p, nil
#+END_EXAMPLE

Note to self: src_emacs-lisp{(setq async-debug t)} {{{results(=t=)}}} is your friend for
debugging errors like this. You can yank the exact string that's
getting passed to the child process out of the ~*Messages*~ buffer and
debug it in an ~emacs -Q~ session.

Using this method I eventually worked out the right combination of
escapes and captures in the async macros. And it actually works!

#+BEGIN_SRC emacs-lisp
  (defun org-babel-execute-src-block-mine (&optional arg info params)
    "Execute the current source code block.
  Insert the results of execution into the buffer.  Source code
  execution and the collection and formatting of results can be
  controlled through a variety of header arguments.

  With prefix argument ARG, force re-execution even if an existing
  result cached in the buffer would otherwise have been returned.

  Optionally supply a value for INFO in the form returned by
  `org-babel-get-src-block-info'.

  Optionally supply a value for PARAMS which will be merged with
  the header arguments specified at the front of the source code
  block."
    (interactive)
    (let* ((org-babel-current-src-block-location
            (or org-babel-current-src-block-location
                (nth 5 info)
                (org-babel-where-is-src-block-head)))
           (info (if info (copy-tree info) (org-babel-get-src-block-info))))
      ;; Merge PARAMS with INFO before considering source block
      ;; evaluation since both could disagree.
      (cl-callf org-babel-merge-params (nth 2 info) params)
      (when (org-babel-check-evaluate info)
        (cl-callf org-babel-process-params (nth 2 info))
        (let* ((params (nth 2 info))
               (cache (let ((c (cdr (assq :cache params))))
                        (and (not arg) c (string= "yes" c))))
               (new-hash (and cache (org-babel-sha1-hash info)))
               (old-hash (and cache (org-babel-current-result-hash)))
               (current-cache (and new-hash (equal new-hash old-hash))))
          (cond
           (current-cache
            (save-excursion ; Return cached result.
              (goto-char (org-babel-where-is-src-block-result nil info))
              (forward-line)
              (skip-chars-forward " \t")
              (let ((result (org-babel-read-result)))
                (message (replace-regexp-in-string "%" "%%" (format "%S" result)))
                result)))
           ((org-babel-confirm-evaluate info)
            (let* ((lang (nth 0 info))
                   (result-params (cdr (assq :result-params params)))
                   ;; Expand noweb references in BODY and remove any
                   ;; coderef.
                   (body
                    (let ((coderef (nth 6 info))
                          (expand
                           (if (org-babel-noweb-p params :eval)
                               (org-babel-expand-noweb-references info)
                             (nth 1 info))))
                      (if (not coderef) expand
                        (replace-regexp-in-string
                         (org-src-coderef-regexp coderef) "" expand nil nil 1))))
                   (dir (cdr (assq :dir params)))
                   (default-directory
                     (or (and dir (file-name-as-directory (expand-file-name dir)))
                         default-directory))
                   (cmd (intern (concat "org-babel-execute:" lang)))
                   result)
              (unless (fboundp cmd)
                (error "No org-babel-execute function for %s!" lang))
              (message "executing %s code block%s..."
                       (capitalize lang)
                       (let ((name (nth 4 info)))
                         (if name (format " (%s)" name) "")))
              (if (member "none" result-params)
                  (progn (funcall cmd body params)
                         (message "result silenced"))
                (progn
                  (async-start
                   `(lambda ()
                      (setq exec-path (append exec-path '("~/.emacs.d/elpa")))
                      (package-initialize)
                      (org-babel-do-load-languages
                       'org-babel-load-languages
                       '((emacs-lisp . t)
                         (shell . t)))
                      (,cmd ,body ',params))
                   `(lambda (result)
                      (message "Async done: %s" result)
                      (switch-to-buffer ,(current-buffer))
                      (goto-char ,(point))
                      (org-babel-insert-result result)
                      (message "Insert done: %s" result)
                      (run-hooks 'org-babel-after-execute-hook))))))))))))
#+END_SRC
#+RESULTS:
: org-babel-execute-src-block-mine

#+BEGIN_SRC sh
sleep 7s && echo "hi"
#+END_SRC

#+RESULTS:
: hi

Woo-hoo! The problem ended up being that the callback was running in a
buffer called <*emacs*> or some such name, so it wasn't able to find
the #+RESULTS block.

* Header
:PROPERTIES:
:header-args: :tangle ob-async.el
:END:


#+BEGIN_SRC emacs-lisp
  ;;; ob-async.el --- Asynchronous org-babel src block execution

  ;; Copyright (C) 2017 Andrew Stahlman

  ;; Author: Andrew Stahlman <andrewstahlman@gmail.com>
  ;; Created: 10 Feb 2017
  ;; Version: 0.1

  ;; Keywords: tools
  ;; Homepage: https://github.com/astahlman/ob-async

  ;; This file is not part of GNU Emacs.

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;; Package-Requires: ((async "1.9") (org "9.0.1") (emacs "24.4") (dash "2.14.1"))

  ;;; Commentary:
  ;; This file enables asynchronous execution of org-babel
  ;; src blocks through the ob-async-org-babel-execute-src-block function

  ;;; Code:
#+END_SRC

#+RESULTS:

* Implementation
:PROPERTIES:
:header-args: :tangle ob-async.el
:END:

Ok, now that this works, let's think about the right way to do this.
I'm thinking of dispatching based on the presence of an :async src
block header. If that header is present, we'll replace or insert a
GUID placeholder in the results block and then kick off the
asynchronous process. In the callback, we'll switch back to this
buffer, goto point min, search forward for the captured GUID
placeholder, and replace/insert the results.

I'd also like to test this with ERT.

#+BEGIN_SRC emacs-lisp
  (provide 'ob-async)

  (require 'org)
  (require 'async)
  (require 'dash)
#+END_SRC

#+RESULTS:
: async

** Acceptance Tests
:PROPERTIES:
:header-args: :tangle test/ob-async-test.el
:END:

*** Test Infrastructure

#+BEGIN_SRC emacs-lisp
  (defun placeholder-p (s)
    "Return non-nil if S is a placeholder for an asynchronous result."
    (and (= 32 (length s)) (string-match-p "^[a-z0-9]\\{32\\}$" s)))

  (defun results-block-contents (&optional position)
    "Return the contents of the *only* results block in the buffer.
  Assume the source block is at POSITION if non-nil."
    (interactive)
    (save-excursion
      (progn
	(if position
	    (goto-char position)
	  (goto-char 0)
	  (org-babel-next-src-block))
	(goto-char (org-babel-where-is-src-block-result))
	(let ((result (org-babel-read-result)))
          (message "RESULTS: %s" result)
          result))))

  (defmacro with-buffer-contents (s &rest forms)
    "Create a temporary buffer with contents S and execute FORMS."
    `(save-excursion
       (with-temp-buffer
	 (progn
	   (goto-char 0)
	   (insert ,s)
	   (goto-char 0)
	   ,@forms))))

  (defun wait-for-seconds (n)
    "Sleep for N seconds.  This is a workaround for a bug in sleep-for.
  See http://stackoverflow.com/questions/14698081/elisp-sleep-for-doesnt-block-when-running-a-test-in-ert"
    (let ((deadline (+ n (float-time))))
      (while (< (float-time) deadline)
	(sleep-for 1))))
#+END_SRC

#+RESULTS:
: wait-for-seconds

*** Shell block, no prior RESULTS

#+BEGIN_SRC emacs-lisp
  (ert-deftest test-async-execute-fresh-sh-block ()
    "Test that we can insert results for a sh block that hasn't been executed yet"
    (let ((buffer-contents "Here's a shell source block:

    #+BEGIN_SRC sh :async
	sleep 1s && echo 'Sorry for the wait.'
    #+END_SRC"))
      (with-buffer-contents buffer-contents
			    (org-babel-next-src-block)
			    (org-ctrl-c-ctrl-c)
			    (should (placeholder-p (results-block-contents)))
			    (wait-for-seconds 5)
			    (should (string= "Sorry for the wait." (results-block-contents))))))
#+END_SRC

#+RESULTS:
: test-async-execute-fresh-sh-block

*** Shell block, with prior results
#+BEGIN_SRC emacs-lisp
  (ert-deftest test-async-execute-existing-sh-block ()
    "Test that we can insert results for a sh block that has already been executed"
    (let ((buffer-contents "Here's a shell source block:

    #+BEGIN_SRC sh :async
       sleep 1s && echo 'Sorry for the wait.'
    #+END_SRC"))
      (with-buffer-contents buffer-contents
			    (org-babel-next-src-block)
			    (org-ctrl-c-ctrl-c)
			    (should (placeholder-p (results-block-contents)))
			    (wait-for-seconds 5)
			    (should (string= "Sorry for the wait." (results-block-contents)))
			    (goto-char 0)
			    (org-babel-next-src-block)
			    (org-ctrl-c-ctrl-c)
			    (should (placeholder-p (results-block-contents)))
			    (wait-for-seconds 5)
			    (should (string= "Sorry for the wait." (results-block-contents))))))
#+END_SRC

#+RESULTS:
: test-async-execute-existing-sh-block

*** Another language: Python block, no prior results
#+BEGIN_SRC emacs-lisp
  (ert-deftest test-async-execute-python-block ()
    "Test that we can insert results for a sh block that hasn't been executed yet"
    (let ((buffer-contents "Here's a Python source block:

    #+BEGIN_SRC python :async
	return 1 + 1
    #+END_SRC"))
      (with-buffer-contents buffer-contents
			    (org-babel-next-src-block)
			    (org-ctrl-c-ctrl-c)
			    (should (placeholder-p (results-block-contents)))
			    (wait-for-seconds 5)
			    (should (= 2 (results-block-contents))))))
#+END_SRC

#+RESULTS:
: test-async-execute-python-block

*** Insert results while typing above the src block

#+BEGIN_SRC emacs-lisp
  (ert-deftest test-async-return-to-point-above-block ()
    "Test that results are inserted in the correct location
  when content has been added above the source block"
    (let ((buffer-contents "Here's a Python source block:

    #+BEGIN_SRC python :async
	return 1 + 1
    #+END_SRC"))
      (with-buffer-contents buffer-contents
			    (org-babel-next-src-block)
			    (org-ctrl-c-ctrl-c)
			    (should (placeholder-p (results-block-contents)))
			    (re-search-backward "block:")
			    (end-of-line)
			    (newline-and-indent)
			    (insert "Here's some more stuff while we're waiting")
			    (let ((captured-point (point)))
			      (wait-for-seconds 5)
			      (should (= 2 (results-block-contents)))
			      (should (= captured-point (point)))
			      (should (re-search-backward "some more stuff"))
			      (should (re-search-forward "BEGIN_SRC python"))))))
#+END_SRC

#+RESULTS:
: test-async-return-to-point-above-block

*** Insert results while typing below the src block

#+BEGIN_SRC emacs-lisp
  (ert-deftest test-async-return-to-point-below-block ()
    "Test that results are inserted in the correct location
  when content has been added below the source block"
    (let ((buffer-contents "Here's a Python source block:

    #+BEGIN_SRC python :async
	return 1 + 1
    #+END_SRC"))
      (with-buffer-contents buffer-contents
			    (org-babel-next-src-block)
			    (org-ctrl-c-ctrl-c)
			    (should (placeholder-p (results-block-contents)))
			    (goto-char (point-max))
			    (newline-and-indent)
			    (insert "Here's some more stuff while we're waiting")
			    (let* ((captured-point (point))
				   (expected-point (- captured-point (- (length (ob-async--generate-uuid))
									(length "2")))))
			      (wait-for-seconds 5)
			      (should (= 2 (results-block-contents)))
			      (should (= expected-point (point)))
			      (should (re-search-backward "some more stuff"))
			      (should (re-search-backward "END_SRC"))))))
#+END_SRC

#+RESULTS:
: test-async-return-to-point-below-block

*** File output

#+BEGIN_SRC emacs-lisp
  (ert-deftest test-async-execute-file-block ()
    "Test that we can insert results when header-arg :file is present"
    (let ((buffer-contents "Here's a sh source block:

    #+BEGIN_SRC sh :async :file \"/tmp/foo\"
       echo \"Don't wait on me\"
    #+END_SRC"))
      (with-buffer-contents buffer-contents
			    (org-babel-next-src-block)
			    (org-ctrl-c-ctrl-c)
			    (should (placeholder-p (results-block-contents)))
			    (wait-for-seconds 5)
			    (should (string= "/tmp/foo" (results-block-contents)))
			    (let ((foo-contents (progn (find-file "/tmp/foo") (buffer-substring-no-properties (point-min) (point-max)))))
			      (should (string= "Don't wait on me\n" foo-contents))))))
#+END_SRC

#+RESULTS:
: test-async-execute-file-block

*** Table output
#+BEGIN_SRC emacs-lisp
  (ert-deftest test-async-execute-table-output ()
    "Test that we can insert table output"
    (let ((buffer-contents "Here's a source block:

  #+BEGIN_SRC python :results output table :async t
  x = [['{},{}    '.format(i, j) for j in range(1, 3)] for i in range(1, 3)]
  for row in x:
      print '{}\\n'.format(x)
  #+END_SRC"))
      (with-buffer-contents buffer-contents
			    (org-babel-next-src-block)
			    (org-ctrl-c-ctrl-c)
			    (should (placeholder-p (results-block-contents)))
			    (message "Waiting")
			    (wait-for-seconds 8)
			    (should (equal '(("1,1" "1,2") ("2,1" "2,2")) (results-block-contents)))
			    (message "%s" (results-block-contents)))))
#+END_SRC

#+RESULTS:
: test-async-execute-table-output

*** Tramp

#+BEGIN_SRC emacs-lisp
  (ert-deftest test-async-execute-tramp-block ()
    "Test that we can execute a block via Tramp with a :dir header-arg"
    (let ((buffer-contents (format "Here's a sh source block:

    ,#+BEGIN_SRC sh :async :dir \"/sudo:%s@localhost:/\"
       echo $SUDO_USER $PWD
    ,#+END_SRC" user-login-name)))
      (with-buffer-contents buffer-contents
			    (org-babel-next-src-block)
			    (org-ctrl-c-ctrl-c)
			    (should (placeholder-p (results-block-contents)))
			    (wait-for-seconds 5)
			    (should (string= (format "%s /" user-login-name) (results-block-contents))))))
#+END_SRC

#+RESULTS:
: test-async-execute-tramp-block

*** org-ctrl-c-ctrl-c-hook

#+BEGIN_SRC emacs-lisp
  (ert-deftest test-async-ctrl-c-ctrl-c-hook ()
    "Test that asynchronous execution works with org-ctrl-c-ctrl-c-hook."
    (let ((buffer-contents "Here's a shell source block:

    ,#+BEGIN_SRC sh :async
	sleep 1s && echo 'Sorry for the wait.'
    ,#+END_SRC")
	  (org-ctrl-c-ctrl-c-hook '(ob-async-org-babel-execute-src-block)))
      (with-buffer-contents buffer-contents
			    (org-babel-next-src-block)
			    (org-ctrl-c-ctrl-c)
			    (should (placeholder-p (results-block-contents)))
			    (wait-for-seconds 5)
			    (should (string= "Sorry for the wait." (results-block-contents))))))
#+END_SRC

#+RESULTS:
: test-async-ctrl-c-ctrl-c-hook

*** TODO Concurrent execution of multiple blocks
*** Execute a named block

#+BEGIN_SRC emacs-lisp
  (ert-deftest test-async-execute-named-block ()
    "Test that we can asynchronously execute a block when cursor is on the name."
    (let ((buffer-contents "Here's a shell source block:
    ,#+NAME: async-block
    ,#+BEGIN_SRC sh :async
       sleep 1s && echo 'Sorry for the wait.'
    ,#+END_SRC"))
      (with-buffer-contents buffer-contents
			    (re-search-forward "#\\+NAME")
			    (org-ctrl-c-ctrl-c)
			    (should (placeholder-p (results-block-contents)))
			    (wait-for-seconds 5)
			    (should (string= "Sorry for the wait." (results-block-contents))))))
#+END_SRC

#+RESULTS:
: test-async-execute-named-block

*** Execute a named block with existing named results located anywhere in buffer

#+BEGIN_SRC emacs-lisp
  (ert-deftest test-async-execute-named-block-with-results ()
    "Test that we can asynchronously execute a named block when results are anywhere in buffer."
    (let ((buffer-contents "Here's a shell source block:
    ,#+RESULTS: async-block

    ,#+NAME: async-block
    ,#+BEGIN_SRC sh :async
       sleep 1s && echo 'Sorry for the wait.'
    ,#+END_SRC"))
      (with-buffer-contents buffer-contents
			  (re-search-forward "#\\+NAME")
			  (org-ctrl-c-ctrl-c)
			  (should (placeholder-p (results-block-contents)))
			  (wait-for-seconds 5)
			  (should (string= "Sorry for the wait." (results-block-contents))))))
#+END_SRC

#+RESULTS:
: test-async-execute-named-block-with-results


*** TODO Execute a blocks with post-processing
*** TODO Silent output

How should we handle this? Maybe it would be best to put a placeholder
in a results block, then delete it once the command completes.

#+BEGIN_SRC emacs-lisp
  (ert-deftest test-async-execute-silent-block ()
    "Test that we can insert results for a sh block that hasn't been executed yet"
    :expected-result :failed
    (let ((buffer-contents "Here's a sh source block:

    #+BEGIN_SRC sh :async :results silent
    echo \"Don't wait on me\"
    #+END_SRC"))
      (with-buffer-contents buffer-contents
			    (org-babel-next-src-block)
			    (org-ctrl-c-ctrl-c)
			    (should (placeholder-p (results-block-contents)))
			    (wait-for-seconds 5)
			    (should (not (results-block-contents))))))
#+END_SRC

#+RESULTS:
: test-async-execute-silent-block
*** TODO Notification when execution fails
*** #+CALL blocks

#+BEGIN_SRC emacs-lisp
  (ert-deftest test-async-execute-call ()
    "Test that we can asynchronously execute a #+CALL element."
    (let ((buffer-contents "Here's a shell source block:
    ,#+NAME: async-block
    ,#+BEGIN_SRC sh :async
       sleep 1s && echo 'Sorry for the wait.'
    ,#+END_SRC

    ,#+CALL: async-block()"))
      (with-buffer-contents buffer-contents
			    (let ((position (re-search-forward "#\\+CALL")))
			      (org-ctrl-c-ctrl-c)
			      (should (placeholder-p (results-block-contents position)))
			      (wait-for-seconds 5)
			      (should (string= "Sorry for the wait." (results-block-contents position)))))))
#+END_SRC

#+RESULTS:
: test-async-execute-call

*** Confirmation of evaluation

#+BEGIN_SRC emacs-lisp
  (ert-deftest test-confirm-evaluate ()
    "Test that we do not add a RESULTS block if evaluation is not confirmed"
    (let ((buffer-contents "
    ,#+BEGIN_SRC sh :async
       sleep 1s && echo 'Sorry for the wait.'
    ,#+END_SRC")
          (org-confirm-babel-evaluate t)
          (org-babel-confirm-evaluate-answer-no t))
      (with-buffer-contents buffer-contents
                              (org-babel-next-src-block)
                              (org-ctrl-c-ctrl-c)
                              (should (not (org-babel-where-is-src-block-result))))))
#+END_SRC

#+RESULTS:
: test-confirm-evaluate


** Definition

I didn't follow the standard naming convention when I named this
function the first time around. This alias ensures we don't break
anyone's ctrl-c ctrl-c hooks.

#+BEGIN_SRC emacs-lisp
  ;;;###autoload
  (defalias 'org-babel-execute-src-block:async 'ob-async-org-babel-execute-src-block)
#+END_SRC

#+RESULTS:
: org-babel-execute-src-block:async

If the header contains ~:async~, we'll steal the command before it
gets to ~org-babel-execute-src-block~. The guts of this function are
ripped straight from the original source for
~org-babel-execute-src-block~.

#+BEGIN_SRC emacs-lisp
  ;;;###autoload
  (defun ob-async-org-babel-execute-src-block (&optional orig-fun arg info params)
    "Like org-babel-execute-src-block, but run asynchronously.

  Original docstring for org-babel-execute-src-block:

  Execute the current source code block.  Insert the results of
  execution into the buffer.  Source code execution and the
  collection and formatting of results can be controlled through a
  variety of header arguments.

  With prefix argument ARG, force re-execution even if an existing
  result cached in the buffer would otherwise have been returned.

  Optionally supply a value for INFO in the form returned by
  `org-babel-get-src-block-info'.

  Optionally supply a value for PARAMS which will be merged with
  the header arguments specified at the front of the source code
  block."
    (interactive "P")
    (cond
     ;; If this function is not called as advice, do nothing
     ((not orig-fun)
      (warn "ob-async-org-babel-execute-src-block is no longer needed in org-ctrl-c-ctrl-c-hook")
      nil)
     ;; If there is no :async parameter, call the original function
     ((not (assoc :async (nth 2 (or info (org-babel-get-src-block-info)))))
      (funcall orig-fun arg info params))
     ;; Otherwise, perform asynchronous execution
     (t
      (let ((placeholder (ob-async--generate-uuid)))
        ;; Here begins the original source of org-babel-execute-src-block
        (let* ((org-babel-current-src-block-location
                (or org-babel-current-src-block-location
                    (nth 5 info)
                    (org-babel-where-is-src-block-head)))
               (info (if info (copy-tree info) (org-babel-get-src-block-info))))
          ;; Merge PARAMS with INFO before considering source block
          ;; evaluation since both could disagree.
          (cl-callf org-babel-merge-params (nth 2 info) params)
          (when (org-babel-check-evaluate info)
            (cl-callf org-babel-process-params (nth 2 info))
            (let* ((params (nth 2 info))
                   (cache (let ((c (cdr (assq :cache params))))
                            (and (not arg) c (string= "yes" c))))
                   (new-hash (and cache (org-babel-sha1-hash info)))
                   (old-hash (and cache (org-babel-current-result-hash)))
                   (current-cache (and new-hash (equal new-hash old-hash))))
              (cond
               (current-cache
                (save-excursion		;Return cached result.
                  (goto-char (org-babel-where-is-src-block-result nil info))
                  (forward-line)
                  (skip-chars-forward " \t")
                  (let ((result (org-babel-read-result)))
                    (message (replace-regexp-in-string "%" "%%" (format "%S" result)))
                    result)))
               ((org-babel-confirm-evaluate info)
                ;; Insert a GUID as a placeholder in our RESULTS block
                (org-babel-insert-result placeholder '("replace"))
                (let* ((lang (nth 0 info))
                       (result-params (cdr (assq :result-params params)))
                       ;; Expand noweb references in BODY and remove any
                       ;; coderef.
                       (body
                        (let ((coderef (nth 6 info))
                              (expand
                               (if (org-babel-noweb-p params :eval)
                                   (org-babel-expand-noweb-references info)
                                 (nth 1 info))))
                          (if (not coderef) expand
                            (replace-regexp-in-string
                             (org-src-coderef-regexp coderef) "" expand nil nil 1))))
                       (dir (cdr (assq :dir params)))
                       (default-directory
                         (or (and dir (file-name-as-directory (expand-file-name dir)))
                             default-directory))
                       (cmd (intern (concat "org-babel-execute:" lang)))
                       result)
                  (unless (fboundp cmd)
                    (error "No org-babel-execute function for %s!" lang))
                  (message "executing %s code block%s..."
                           (capitalize lang)
                           (let ((name (nth 4 info)))
                             (if name (format " (%s)" name) "")))
                  (progn
                    (async-start
                     `(lambda ()
                        ;; TODO: Put this in a function so it can be overidden
                        ;; Initialize the new Emacs process with org-babel functions
                        (setq exec-path ',exec-path)
                        (setq load-path ',load-path)
                        (package-initialize)
                        (org-babel-do-load-languages 'org-babel-load-languages ',org-babel-load-languages)
                        (let ((default-directory ,default-directory))
                          (,cmd ,body ',params)))
                     (if (member "none" ',result-params)
                         (progn (message "result silenced")
                                'ignore)
                       `(lambda (result)
                          (switch-to-buffer ,(current-buffer))
                          (point-to-register 13) ;; TODO: totally arbitrary choice of register
                          (goto-char (point-min))
                          (re-search-forward ,placeholder)
                          (org-backward-element)
                          (let ((result-block (split-string (thing-at-point 'line t))))
                            ;; If block has name, search by name
                            (-if-let (block-name (nth 1 result-block))
                                (org-babel-goto-named-src-block block-name)
                              (org-backward-element)))
                          (let ((file (cdr (assq :file ',params))))
                            ;; If non-empty result and :file then write to :file.
                            (when file
                              (when result
                                (with-temp-file file
                                  (insert (org-babel-format-result
                                           result (cdr (assq :sep ',params))))))
                              (setq result file))
                            ;; Possibly perform post process provided its
                            ;; appropriate.  Dynamically bind "*this*" to the
                            ;; actual results of the block.
                            (let ((post (cdr (assq :post ',params))))
                              (when post
                                (let ((*this* (if (not file) result
                                                (org-babel-result-to-file
                                                 file
                                                 (let ((desc (assq :file-desc ',params)))
                                                   (and desc (or (cdr desc) result)))))))
                                  (setq result (org-babel-ref-resolve post))
                                  (when file
                                    (setq result-params (remove "file" ',result-params))))))
                            (org-babel-insert-result result ',result-params ',info ',new-hash ',lang)
                            (run-hooks 'org-babel-after-execute-hook))
                          (goto-char (point-min))
                          (jump-to-register 13)))))))))))))))
#+END_SRC

#+RESULTS:
: ob-async-org-babel-execute-src-block

Our UUID is just a random MD5 hash, which is 32 characters.

#+BEGIN_SRC emacs-lisp
  (defun ob-async--generate-uuid ()
    "Generate a 32 character UUID."
    (md5 (number-to-string (random 100000000))))
#+END_SRC

#+RESULTS:
: ob-async--generate-uuid

Advise all org-babel executions for potential asynchronicity.

#+BEGIN_SRC emacs-lisp
  (advice-add 'org-babel-execute-src-block :around 'ob-async-org-babel-execute-src-block)
#+END_SRC

#+RESULTS:

** Test Harness

#+BEGIN_SRC emacs-lisp :tangle test/test-helper.el
  (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t) (shell . t) (python . t)))
  (setq org-confirm-babel-evaluate nil)
  (message "org-version: %s" (org-version))
#+END_SRC

#+RESULTS:
: org-version: 9.0.9

* CI
:PROPERTIES:
:header-args: :tangle .travis.yml
:END:

Every commit is tested on Travis CI. Rather than build Emacs from
source every time, we use prebuilt binaries for Emacs 24.5+ from
[[https://github.com/npostavs/emacs-travis/][npostavs' emacs-travis repository.]]

We test against =org-plus-contrib= from the official org archive and
we take =async= from elpa.

#+BEGIN_SRC yaml :exports results
  language: generic
  sudo: required
  git:
    submodules: false

  env:
    - EMACS_VERSION=24.5
    - EMACS_VERSION=25-prerelease

  install:
    - curl -LO https://github.com/npostavs/emacs-travis/releases/download/bins/emacs-bin-${EMACS_VERSION}.tar.gz
    - tar -xaf emacs-bin-${EMACS_VERSION}.tar.gz -C /
    # Configure $PATH: Emacs installed to /tmp/emacs
    - export PATH=/tmp/emacs/bin:${PATH}
    - if ! emacs -Q --batch --eval "(require 'cl-lib)" ; then
          curl -Lo cl-lib.el http://elpa.gnu.org/packages/cl-lib-0.5.el ;
          export warnings="'(not cl-functions)" ;
      fi
    - if ! emacs -Q --batch --eval "(require 'ert)" ; then
          curl -LO https://raw.githubusercontent.com/ohler/ert/c619b56c5bc6a866e33787489545b87d79973205/lisp/emacs-lisp/ert.el &&
          curl -LO https://raw.githubusercontent.com/ohler/ert/c619b56c5bc6a866e33787489545b87d79973205/lisp/emacs-lisp/ert-x.el ;
      fi
    - emacs --version
    # Install Cask
    - mkdir -p "$HOME"/bin # Cask is installed here
    - wget 'https://raw.githubusercontent.com/flycheck/emacs-travis/master/emacs-travis.mk'
    - make -f emacs-travis.mk install_cask
    # Use Cask to install dependencies
    - make install-dev

  script:
    - make test

  notifications:
    email:
      # Default is change, but that includes a new branch's 1st success.
      on_success: never
      on_failure: always # The default.
#+END_SRC

#+RESULTS:
#+begin_example
language: generic
sudo: required
git:
  submodules: false

env:
  - EMACS_VERSION=24.5
  - EMACS_VERSION=25-prerelease

install:
  - curl -LO https://github.com/npostavs/emacs-travis/releases/download/bins/emacs-bin-${EMACS_VERSION}.tar.gz
  - tar -xaf emacs-bin-${EMACS_VERSION}.tar.gz -C /
  # Configure $PATH: Emacs installed to /tmp/emacs
  - export PATH=/tmp/emacs/bin:${PATH}
  - if ! emacs -Q --batch --eval "(require 'cl-lib)" ; then
        curl -Lo cl-lib.el http://elpa.gnu.org/packages/cl-lib-0.5.el ;
        export warnings="'(not cl-functions)" ;
    fi
  - if ! emacs -Q --batch --eval "(require 'ert)" ; then
        curl -LO https://raw.githubusercontent.com/ohler/ert/c619b56c5bc6a866e33787489545b87d79973205/lisp/emacs-lisp/ert.el &&
        curl -LO https://raw.githubusercontent.com/ohler/ert/c619b56c5bc6a866e33787489545b87d79973205/lisp/emacs-lisp/ert-x.el ;
    fi
  - emacs --version
  # Install Cask
  - mkdir -p "$HOME"/bin # Cask is installed here
  - wget 'https://raw.githubusercontent.com/flycheck/emacs-travis/master/emacs-travis.mk'
  - make -f emacs-travis.mk install_cask
  # Use Cask to install dependencies
  - make install-dev

script:
  - make test

notifications:
  email:
    # Default is change, but that includes a new branch's 1st success.
    on_success: never
    on_failure: always # The default.
#+end_example

* Footer
:PROPERTIES:
:header-args: :tangle ob-async.el
:END:

#+BEGIN_SRC emacs-lisp :tangle ob-async.el
  ;;; ob-async.el ends here
#+END_SRC

#+RESULTS:

* COMMENT Local Variables
# Local Variables:
# org-src-preserve-indentation: nil
# org-adapt-indentation: nil
# End:
